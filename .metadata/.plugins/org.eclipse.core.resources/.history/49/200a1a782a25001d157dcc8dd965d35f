package com.hdcc.dto;

import java.sql.Date;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import javax.validation.constraints.Email;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.hdcc.entity.Customer;

import lombok.Data;

@Data
public class CustomerDto {
	private int id;
	
	@NotNull(message = "{customer.name.absent}")
	@Pattern(regexp = "[A-Za-z]+( [A-Za-z]+)*", message = "{customer.name.invalid}")
	private String name;
	
	@NotNull(message = "{customer.address.absent}")
	@Pattern(regexp = "[A-Za-z]+( [A-Za-z]+)*", message = "{customer.address.invalid}")
	private String permanentAddress;
	
	@NotNull(message = "{customer.address.absent}")
	@Pattern(regexp = "[A-Za-z]+( [A-Za-z]+)*", message = "{customer.address.invalid}")
	private String currentAddress;
	
	@NotNull(message = "{customer.phone.absent}")
	@Pattern(regexp = "[789][0-9]{9}", message = "{customer.phone.invalid}")
	private String contactDetails;
	
	@Email(message = "{customer.email.invalid}")
	@NotNull(message = "{customer.email.absent}")
	private String email;
	
	@NotNull(message = "{customer.occupation.absent}")
	@Pattern(regexp = "[A-Za-z]+( [A-Za-z]+)*", message = "{customer.occupation.invalid}")
	private String occupation;
	
	@JsonFormat(pattern = "yyyy/MM/dd")
	private Date dob;
	
	private String panNo;
	private String aadharNo;
	private String passportNo;
	private String kycNo;
	//private byte[] image;
	private List<AccountDto> accountsDto = new ArrayList<>();
	
	public static CustomerDto from(Customer customer) {
		CustomerDto customerDto = new CustomerDto();
		customerDto.setId(customer.getId());
		customerDto.setName(customer.getName());
		customerDto.setPermanentAddress(customer.getPermanentAddress());
		customerDto.setCurrentAddress(customer.getCurrentAddress());
		customerDto.setContactDetails(customer.getContactDetails());
		customerDto.setEmail(customer.getEmail());
		customerDto.setOccupation(customer.getOccupation());
		customerDto.setDob(customer.getDob());
		customerDto.setPanNo(customer.getPanNo());
		customerDto.setAadharNo(customer.getAadharNo());
		customerDto.setPassportNo(customer.getPassportNo());
		customerDto.setKycNo(customer.getKycNo());
		//customerDto.setImage(customer.getImage());
		customerDto.setAccountsDto(customer.getAccounts().stream().map(AccountDto::from).collect(Collectors.toList()));
		return customerDto;
		
	}
}
